package com.example.cxf;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.1.3
 * 2025-09-13T00:01:49.064+09:00
 * Generated source version: 4.1.3
 *
 */
@WebServiceClient(name = "CountryService",
                  wsdlLocation = "http://localhost:8080/ws/country?wsdl",
                  targetNamespace = "http://example.com/cxf")
public class CountryService extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://example.com/cxf", "CountryService");
    public static final QName CountryServicePort = new QName("http://example.com/cxf", "CountryServicePort");
    static {
        URL url = null;
        try {
            url = URI.create("http://localhost:8080/ws/country?wsdl").toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CountryService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/ws/country?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CountryService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CountryService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CountryService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public CountryService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CountryService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CountryService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns CountryEndpoint
     */
    @WebEndpoint(name = "CountryServicePort")
    public CountryEndpoint getCountryServicePort() {
        return super.getPort(CountryServicePort, CountryEndpoint.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CountryEndpoint
     */
    @WebEndpoint(name = "CountryServicePort")
    public CountryEndpoint getCountryServicePort(WebServiceFeature... features) {
        return super.getPort(CountryServicePort, CountryEndpoint.class, features);
    }

}
